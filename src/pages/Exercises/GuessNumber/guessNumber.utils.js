/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã.
 * @returns {number}
 */
export const generateSecretNumber = () => {
  return Math.floor(Math.random() * 100) + 1;
};

/**
 * –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:
 * - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ
 * - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ
 * - —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 *
 * @param {Function} setGuess - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
 * @param {Function} setResult - –æ—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 * @param {Function} setSecretNumber - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —á–∏—Å–ª–∞
 * @param {Function} setAttemptsLeft - —Å–±—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
 */
export const resetGame = (
  setGuess,
  setResult,
  setSecretNumber,
  setAttemptsLeft
) => {
  setGuess("");
  setResult("");
  setSecretNumber(generateSecretNumber());
  setAttemptsLeft(5); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ.
 * @param {string|number} guess - –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–∏—Å–ª–æ
 * @param {number} secretNumber - –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
 * @param {number} attemptsLeft - —Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å
 * @param {Function} setAttemptsLeft - —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–æ–∫
 * @param {Function} setResult - —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */
export const handleGuess = (
  guess,
  secretNumber,
  attemptsLeft,
  setAttemptsLeft,
  setResult
) => {
  const number = Number(guess);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
  if (!number || number < 1 || number > 100) {
    setResult("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100");
    return;
  }

  if (number === secretNumber) {
    setResult(`üéâ –£–≥–∞–¥–∞–ª! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: ${secretNumber}`);
  } else {
    const newAttempts = attemptsLeft - 1;
    setAttemptsLeft(newAttempts);

    if (newAttempts === 0) {
      setResult(`üò¢ –ù–µ —É–≥–∞–¥–∞–ª. –ë—ã–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ: ${secretNumber}`);
    } else {
      setResult(number < secretNumber ? "üîº –ë–æ–ª—å—à–µ" : "üîΩ –ú–µ–Ω—å—à–µ");
    }
  }
};
